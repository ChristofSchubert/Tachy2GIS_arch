# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LfADockWidget
                                 A QGIS plugin
 Tool für das Landesamt für Archäologie Dresden
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-11-29
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Daniel Timmel
        email                : aaa@web.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5 import QtWidgets, QtCore, QtGui, uic
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from qgis.core import *
from qgis.gui import *
from ..functions import *
#from ..t2g_arch_dockwidget import T2G_ArchDockWidget
import os, csv


FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'myDwgFeatureToCompare.ui'))


class FeatureToCompareDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, iface, layer, parent=None):
        """Constructor."""
        super(FeatureToCompareDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        pfad = os.path.abspath(os.path.join(os.path.join(os.path.dirname(__file__), "./..")))
        iconpfad = os.path.join(os.path.join(pfad, 'Icons'))
        self.ui = self
        self.iface = iface
        self.canvas = iface.mapCanvas()
        self.layer = layer
        self.ui.but_File_open.clicked.connect(self.setSourePfad)
        self.ui.but_File_open.setIcon(QIcon(os.path.join(iconpfad, 'ordner-open.png')))
        self.ui.but_File_open.setToolTip('Quellendatei wählen!')

        self.ui.txt_Sourcepfad.textChanged.connect(self.loadSourceFile)

        #self.ui.tableWidget.itemChanged.connect(self.vertexEdit)
        #self.ui.tableWidget.itemSelectionChanged.connect(self.test)
        #self.ui.tableWidget.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        #self.ui.tableWidget.customContextMenuRequested.connect(self.on_customContextMenu)

        self.ui.canvas_clicked = PrintClickedPoint(self.iface.mapCanvas(), self.ui)
        #self.ui.lineEdit.textChanged.connect(self.nearest)
        self.ui.sourceLayer = None
        self.ui.setup()

    def setup(self):
        pass

    def setSourePfad (self):
        dlg = QFileDialog()
        sourcePfad = dlg.getOpenFileName(None, "Quelle", os.path.abspath('D:\#Projekt Tachy2GIS#\WW-71_Projekt\Shape'),
                                          "Shape (*.shp);;Alle (*.*)",
                                          initialFilter='Shape (*.shp)')
        if sourcePfad[0] == '':
            return
        else:
            self.ui.txt_Sourcepfad.setText(sourcePfad[0])
        pass

    def loadSourceFile(self):
        if os.path.exists(self.ui.txt_Sourcepfad.text()):
            self.ui.tableWidget.hide()
            self.ui.sourceLayer = QgsVectorLayer(self.ui.txt_Sourcepfad.text(), "Quelle", "ogr")
            QgsProject.instance().addMapLayer(self.ui.sourceLayer)

            attributeList = self.ui.sourceLayer.dataProvider().fields().toList()
            self.ui.tableWidget.setColumnCount(len(attributeList))
            fieldnamen = []
            for attrib in attributeList:
                fieldnamen.append(attrib.name())
                QgsMessageLog.logMessage(attrib.name(), 'T2G Archäologie', Qgis.Info)
            self.ui.tableWidget.setHorizontalHeaderLabels(fieldnamen)

            progress = progressBar('Fortschritt')

            features = self.ui.sourceLayer.getFeatures()
            progress.setMaximum(self.ui.sourceLayer.featureCount())
            row = 0
            sourceuuidlist =[ ]
            for feature in features:
                self.ui.tableWidget.insertRow(row)
                column = 0
                progress.setValue(row)
                progress.setText(str(row) + ' von ' + str(self.ui.sourceLayer.featureCount()) + ' eingelesen' )
                sourceuuidlist.append(feature.attributes()[len(attributeList)-1])
                for attrib in feature.attributes():
                    self.ui.tableWidget.setItem(row,column,QTableWidgetItem(str(attrib)))
                    QgsMessageLog.logMessage(str(attrib), 'T2G Archäologie', Qgis.Info)
                    column = column+1
                row = row + 1
                QCoreApplication.processEvents()
            self.ui.tableWidget.sortItems(len(attributeList),QtCore.Qt.AscendingOrder)
            self.ui.tableWidget.show()
    def closeEvent(self, event):
        QgsProject.instance().removeMapLayers([self.ui.sourceLayer.id()])
        pass



