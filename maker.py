"""
/***************************************************************************
 T2G_Arch
                                 A QGIS plugin
 Archäologie-PlugIn für Tachy2Gis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-17
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Daniel Timmel
        email                :
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, Qt, QSize, QTimer, pyqtSlot, pyqtSignal
from PyQt5.QtGui import *#QIcon, QPixmap
from PyQt5.QtWidgets import *#QAction, QMessageBox, QFileDialog, QTreeWidgetItem, QInputDialog
from qgis.core import QgsProject, QgsExpressionContextUtils, QgsMessageLog, Qgis, QgsVectorLayer, QgsFeature,QgsWkbTypes
from qgis.utils import iface, plugins


class RubberbandAndMaker:

    def __init__(self, vertices = []):
        self.iface = iface
        self.canvas = iface.mapCanvas()
        self.layer = layer
        self.feature = feature
        self.vertices = vertices
        self.maker = []
        self.makerTyp = QgsVertexMarker.ICON_BOX
        self.makerColor = QColor(0, 255, 0)
        self.rubberBand = []

        self.m = QgsVertexMarker(self.canvas)

    def setMakerColor(self, Color):
        self.makerColor = Color

    def setMakerTyp(self,Icon):
        self.makerTyp = Icon

    def setMarker(self, x , y):

        m.setCenter(QgsPointXY(float(x), float(y)))
        m.setColor(self.makerColor)
        m.setIconSize(10)
        m.setIconType(self.makerTyp)
        m.setPenWidth(2)
        m.show()
        self.maker.append(m)

    def setRubberBandGeometry(self,geometry):
        r = QgsRubberBand(iface.mapCanvas(), True)
        r.setToGeometry(geometry.geometry(), None)
        r.setColor(QColor(255, 0, 0))
        r.setWidth(5)
        r.show()
        rubberBand.append(r)